openapi: 3.0.2
info:
  version: "0.1.0"
  title: "PW Diet Calculator"
  description: "API is versioned in routes except one `/version` which is special route available on root without version too and this is only route which have to be perfect at beginning to not change it for compatibility in future."
  contact:
    email: "paipweb@paipweb.com"
    name: "PAiP Web"
  license:
    name: "MIT"
    url: "https://github.com/paip-web/pw-diet-calculator/blob/master/LICENSE"
servers:
  -
    url: "http://pwdiet.api.paipweb.com/api"
    description: "Production Server HTTP"
  -
    url: "https://pwdiet.api.paipweb.com/api"
    description: "Production Server HTTPS"
  -
    url: "http://127.0.0.1:9001/api"
    description: "Development Server"
tags:
  - name: "api"
    description: "API control Routes"
  - name: "user"
    description: "Everything about user"
  - name: "auth"
    description: "Authentication to API"
  - name: "products"
    description: "Everything about Products"
  - name: "products-list"
    description: "Everything about Lists of Products"
  - name: "dishes"
    description: "Everything about Dishes"
  - name: "menus"
    description: "Everything about Menus"
  - name: "diet-plans"
    description: "Everything about Diet Plans"
  - name: "mass"
    description: "Everything about Mass of Users"
  - name: "person"
    description: "Everything about Personal Info about User"
paths:
  /version:
    get:
      tags:
        - "api"
      summary: "Get version of API"
      description:  "Get's current version of API"
      operationId: "getApiVersion"
      responses:
        200:
          description: "API Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getApiVersionResponse"
  /auth/info:
    get:
      tags:
        - "auth"
      summary: "Get authentication information about user"
      description:  "Get's current version of API"
      operationId: "getAuthInfo"
      security: 
        - api_auth:
          - "admin"
      responses:
        200:
          description: "Auth Info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAuthInfoResponse"
  /auth/login:
    post:
      tags:
        - "auth"
      summary: "Login user"
      description:  "Login user and returns token"
      operationId: "loginUser"
      security: 
        - api_auth:
          - "admin"
      responses:
        200:
          description: "Successful Login"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginUserResponse"
        404:
          description: "User Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginUserNotFoundErrorResponse"
        400:
          description: "Invalid Password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginUserInvalidPasswordErrorResponse"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description:  "Create user"
      operationId: "createUser"
      security: 
        - api_auth:
          - "admin"
      requestBody:
        description: "Information about user which you want to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInfoDataModel"
      responses:
        200:
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoResponse"
        400:
          description: "Invalid user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
    put:
      tags:
        - "user"
      summary: "Create user or Update user information"
      description:  "Create user or Update user information"
      operationId: "createOrUpdateUser"
      security: 
        - api_auth:
          - "admin"
      requestBody:
        description: "Information about user which you want to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInfoDataModel"
      responses:
        200:
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoResponse"
        400:
          description: "Invalid user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
  /user/{id}:
    get:
      tags:
        - "user"
      summary: "Get user information"
      description:  "Get user information"
      operationId: "getUser"
      security: 
        - api_auth:
          - "admin"
          - "user"
      parameters: 
        -
          name: "id"
          description: "User Indentifier"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "test"
          schema:
            type: string
      responses:
        200:
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoResponse"
        404:
          description: "No user found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
        400:
          description: "Invalid user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
    patch:
      tags:
        - "user"
      summary: "Update user information"
      description: "Update user information"
      operationId: "updateUser"
      security: 
        - api_auth:
          - "admin"
      requestBody:
        description: "Information about user which you want to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInfoDataModel"
      parameters: 
        -
          name: "id"
          description: "User Indentifier"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "test"
          schema:
            type: string
      responses:
        200:
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoResponse"
        404:
          description: "No user found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
        400:
          description: "Invalid user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
    delete:
      tags:
        - "user"
      summary: "Remove user"
      description:  "Remove user"
      operationId: "removeUser"
      security: 
        - api_auth:
          - "admin"
      parameters: 
        -
          name: "id"
          description: "User Indentifier"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "test"
          schema:
            type: string
      responses:
        200:
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonSuccessResponseModel"
        404:
          description: "No user found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
        400:
          description: "Invalid user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userInfoErrorResponse"
  /product-list/{user}:
    get:
      tags:
        - "products-list"
      summary: "Get all product lists information"
      description:  "Get all product lists information"
      operationId: "getProductLists"
      security: 
        - api_auth:
          - "admin"
          - "user:current"
      parameters: 
        -
          name: "user"
          description: "Product List Owner"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "8815223e-2bdf-4f72-8b71-f9a07f5bb3ee"
          schema:
            type: string
      responses:
        200:
          description: "Product Lists information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllUserProductListResponse"
        204:
          description: "No product lists found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getAllUserProductListEmptyResponse"
        404:
          description: "No user found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
    post:
      tags:
        - "products-list"
      summary: "Create product list"
      description:  "Create product list"
      operationId: "createUserProductList"
      security: 
        - api_auth:
          - "admin"
          - "user:current"
      parameters: 
        -
          name: "user"
          description: "Product List Owner"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "8815223e-2bdf-4f72-8b71-f9a07f5bb3ee"
          schema:
            type: string
      requestBody:
        description: "Information about product list which you want to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserProductListRequest"
      responses:
        200:
          description: "Created Product List information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProductListResponse"
        400:
          description: "Invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
    put:
      tags:
        - "products-list"
      summary: "Create or Update product list information"
      description:  "Create or Update product list information"
      operationId: "createOrUpdateUserProductList"
      security: 
        - api_auth:
          - "admin"
          - "user:current"
      parameters: 
        -
          name: "user"
          description: "Product List Owner"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "8815223e-2bdf-4f72-8b71-f9a07f5bb3ee"
          schema:
            type: string
      requestBody:
        description: "Information about product list which you want to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserProductListRequest"
      responses:
        200:
          description: "Created Product List information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProductListResponse"
        400:
          description: "Invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
  /product-list/{user}/{id}:
    get:
      tags:
        - "products-list"
      summary: "Get specific product list information"
      description:  "Get specific product list information"
      operationId: "getUserProductList"
      security: 
        - api_auth:
          - "admin"
          - "user:current"
      parameters: 
        -
          name: "user"
          description: "Product List Owner"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "8815223e-2bdf-4f72-8b71-f9a07f5bb3ee"
          schema:
            type: string
        -
          name: "id"
          description: "Product List Indentifier"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "test"
          schema:
            type: string
      responses:
        200:
          description: "User information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProductListResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
    patch:
      tags:
        - "products-list"
      summary: "Update product list information"
      description: "Update product list information"
      operationId: "updateUserProductList"
      security: 
        - api_auth:
          - "admin"
          - "user:current"
      parameters: 
        -
          name: "user"
          description: "Product List Owner"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "8815223e-2bdf-4f72-8b71-f9a07f5bb3ee"
          schema:
            type: string
        -
          name: "id"
          description: "Product List Indentifier"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "test"
          schema:
            type: string
      requestBody:
        description: "Information about product list which you want to add"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUserProductListRequest"
      responses:
        200:
          description: "Updated Product List information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userProductListResponse"
        400:
          description: "Invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
        404:
          description: "No product list found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
    delete:
      tags:
        - "products-list"
      summary: "Remove product list"
      description:  "Remove product list"
      operationId: "removeUserProductList"
      security: 
        - api_auth:
          - "admin"
          - "user:current"
      parameters: 
        -
          name: "user"
          description: "Product List Owner"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "8815223e-2bdf-4f72-8b71-f9a07f5bb3ee"
          schema:
            type: string
        -
          name: "id"
          description: "Product List Indentifier"
          in: "path"
          allowEmptyValue: false
          required: true
          example: "test"
          schema:
            type: string
      responses:
        200:
          description: "Created Product List information"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commonSuccessResponseModel"
        400:
          description: "Invalid data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
        404:
          description: "No product list found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/productListErrorResponse"
components:
  securitySchemes:
    api_auth:
      type: "apiKey"
      description: "Basic Authentication through JWT Validation"
      name: "Authorization"
      in: "header"
  schemas:
    commonErrorResponseModel:
      description: "Common Error Response Model"
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: string
          example:
            - "password:invalid"
            - "user:notfound"
    commonSuccessResponseModel:
      description: "Common Success Response Model"
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          example: true
          default: true
    versionObject:
      description: "Version Object"
      type: object
      required:
        - version
        - currentVersion
      properties:
        version:
          type: string
          example: "0.1.0"
        currentVersion:
          type: string
          example: "1.0.0"
    getApiVersionResponse:
      description: "API Version"
      type: object
      required:
        - api
        - spec
        - version
        - currentVersion
      properties:
        api:
          $ref: "#/components/schemas/versionObject"
        spec:
          $ref: "#/components/schemas/versionObject"
        version:
          type: string
          example: "0.1.0"
        currentVersion:
          type: string
          example: "1.0.0"
    AuthInfoModel:
      description: "Authentication Information Data Model"
      type: object
      required:
        - loggedin
      properties:
        logged:
          type: boolean
          example: true
        username:
          type: string
          example: "paipweb"
        jwt:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        permissions:
          type: array
          example:
            - "admin:all"
          items:
            type: string
    ErrorAuthInfoModel:
      description: "Minimal Authentication Information Data Model"
      type: object
      required:
        - loggedin
        - errors
      properties:
        logged:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: string
          example:
            - "password:invalid"
            - "user:notfound"
    loginUserResponse:
      $ref: "#/components/schemas/AuthInfoModel"
    loginUserNotFoundErrorResponse:
      $ref: "#/components/schemas/ErrorAuthInfoModel"
    loginUserInvalidPasswordErrorResponse:
      $ref: "#/components/schemas/ErrorAuthInfoModel"
    getAuthInfoResponse:
      $ref: "#/components/schemas/AuthInfoModel"
    userInfoDataModel:
      description: "User Information"
      type: object
      required:
        - nickname
      properties:
        id:
          type: string
          example: "9053f559-dbdb-49fa-ab21-81ae25812ebd"
          nullable: true
        name:
          type: string
          example: "Patryk"
          nullable: true
        surname:
          type: string
          example: "Adamczyk"
          nullable: true
        nickname:
          type: string
          example: "patrykjadamczyk"
        dateofbirth:
          type: string
          example: "2019-02-06"
          nullable: true
        weight:
          type: number
          example: 52.5
          nullable: true
        height:
          type: number
          example: 185
          nullable: true
    userInfoResponse:
      description: "User Information"
      type: object
      required:
        - name
        - surname
        - nickname
        - dateofbirth
        - weight
        - height
      properties:
        name:
          type: string
          example: "Patryk"
        surname:
          type: string
          example: "Adamczyk"
        nickname:
          type: string
          example: "patrykjadamczyk"
        dateofbirth:
          type: string
          example: "2019-02-06"
        weight:
          type: number
          example: 52.5
        height:
          type: number
          example: 185
    userInfoErrorResponse:
      $ref: "#/components/schemas/commonErrorResponseModel"
    productListErrorResponse:
      $ref: "#/components/schemas/commonErrorResponseModel"
    ProductDataModel: # TODO: Mocked Model replace with proper one
      description: "Product Data Model"
      type: object
    userProductListResponse:
      description: "User Product List Information"
      type: object
      required:
        - name
        - products
      properties:
        name:
          type: string
          example: "Product List 1"
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductDataModel"
    ProductListMiniModel:
      description: "Product List Information"
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          example: "4819f267-6ec9-4819-9fd9-4d17a295e787"
        name:
          type: string
          example: "Product List 1"
    createUserProductListRequest:
      description: "Product List Information"
      type: object
      required:
        - id
        - name
        - products
      properties:
        id:
          type: string
          example: "4819f267-6ec9-4819-9fd9-4d17a295e787"
        name:
          type: string
          example: "Product List 1"
        products:
          type: array
          items:
            type: string
            description: "Identifier of Product"
          example:
            - "70e8f76e-04c3-43c8-a752-2c4d95aac15b"
    getAllUserProductListResponse:
      description: "Get All User Product Lists Information"
      type: object
      required:
        - lists
      properties:
        lists:
          type: array
          items:
            $ref: "#/components/schemas/ProductListMiniModel"
    getAllUserProductListEmptyResponse:
      description: "Get All User Product Lists Empty Information"
      type: object
      required:
        - lists
      properties:
        lists:
          type: array
          items:
            type: string
            nullable: true
          maxItems: 0
          example: []
